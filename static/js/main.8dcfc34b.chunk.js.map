{"version":3,"sources":["mobileDetection.js","Checkbox.js","App.js","extraShortcodeAliases.js","serviceWorker.js","index.js"],"names":["isMobile","hasTouchScreen","navigator","maxTouchPoints","msMaxTouchPoints","mQ","window","matchMedia","media","matches","UA","userAgent","test","Checkbox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleCheckboxChange","_this$props","handleCheckboxChange","label","setState","_ref","isChecked","_props$defaultVal","defaultVal","state","react_default","a","createElement","className","type","value","checked","onChange","Component","aggroRegex","RegExp","emojiConvertor","EmojiConvertor","addAliases","thumbup","thumbdown","timer","cowboy","clown","newspaper2","french_bread","nerd","zipper_mouth","salad","rolling_eyes","basketball_player","thinking","e_mail","slight_frown","skull_crossbones","hand_splayed","speaking_head","cross","crayon","head_bandage","rofl","flag_white","slight_smile","fork_knife_plate","robot","hugging","biohazard","notepad_spiral","lifter","race_car","left_facing_fist","right_facing_fist","tools","umbrella2","upside_down","first_place","dagger","fox","menorah","desktop","motorcycle","levitate","cheese","fingers_crossed","frowning2","microphone2","flag_black","init_colons","App","convertText","rawText","convertAggro","arguments","length","undefined","convertedRaw","replace_colons","replace","match","charAt","val","map","colons","replacement","convertOnInput","e","rawValue","target","convertedValue","options","aggressive","objectSpread","handleCheck","name","newState","defineProperty","copyText","copyClass","setTimeout","_this2","style","textAlign","src_Checkbox","react_textarea_autosize_esm_browser","minRows","maxRows","lib","text","onCopy","href","id","React","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8dcfc34b.chunk.js","sourcesContent":["// https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n\nconst isMobile = () => {\n    let hasTouchScreen = false;\n    if (\"maxTouchPoints\" in navigator) {\n        hasTouchScreen = navigator.maxTouchPoints > 0;\n    } else if (\"msMaxTouchPoints\" in navigator) {\n        hasTouchScreen = navigator.msMaxTouchPoints > 0;\n    } else {\n        let mQ = window.matchMedia && matchMedia(\"(pointer:coarse)\");\n        if (mQ && mQ.media === \"(pointer:coarse)\") {\n            hasTouchScreen = !!mQ.matches;\n        } else if ('orientation' in window) {\n            hasTouchScreen = true; // depedicated, but good fallback\n        } else {\n            // Only as a last resort, fall back to user agent sniffing\n            var UA = navigator.userAgent;\n            hasTouchScreen = (\n                /\\b(BlackBerry|webOS|iPhone|IEMobile)\\b/i.test(UA) ||\n                /\\b(Android|Windows Phone|iPad|iPod)\\b/i.test(UA)\n            );\n        }\n    }\n    return hasTouchScreen;\n};\n\nexport default isMobile;\n\n","import React, {Component} from 'react';\n\nclass Checkbox extends Component {\n\n    constructor(props) {\n        super(props);\n        const {defaultVal = false} = props;\n        this.state = {\n            isChecked: defaultVal,\n        }\n    }\n\n\n    toggleCheckboxChange = () => {\n        const {handleCheckboxChange, label} = this.props;\n\n        this.setState(({isChecked}) => (\n            {\n                isChecked: !isChecked,\n            }\n        ));\n\n        handleCheckboxChange(label);\n    }\n\n    render() {\n        const {label} = this.props;\n        const {isChecked} = this.state;\n\n        return (\n            <div className=\"checkbox\">\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        value={label}\n                        checked={isChecked}\n                        onChange={this.toggleCheckboxChange}\n                    />\n\n                    {label}\n                </label>\n            </div>\n        );\n    }\n}\n\nexport default Checkbox;\n","import React from 'react';\nimport Textarea from 'react-textarea-autosize';\nimport {CopyToClipboard} from \"react-copy-to-clipboard\";\nimport EmojiConvertor from 'emoji-js';\nimport './App.css';\nimport extraShortcodeAliases from \"./extraShortcodeAliases\";\n// https://gist.github.com/oliveratgithub/0bf11a9aff0d6da7b46f1490f86a71eb\nimport isMobile from './mobileDetection';\nimport Checkbox from \"./Checkbox\";\n\n// emoji shortcode regex, could be useful in the future but not using right now\n// https://gist.github.com/ozrabal/4d4e0a94cf2fb27a74149c029c095fe9\n\n//const shortcodeRegex = new RegExp(/:[\\w-]*?:/, 'g');\nconst aggroRegex = new RegExp(/\\w+|:[\\w-]+:/, 'g');\n//const colonReg = new RegExp(/:/, 'g');\n\nconst emojiConvertor = new EmojiConvertor();\nemojiConvertor.addAliases(extraShortcodeAliases);\nemojiConvertor.init_colons();\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            rawValue: null,\n            convertedValue: null,\n            copyClass: null,\n            options: {\n                aggressive: isMobile()\n            }\n        }\n    };\n\n    convertText = (rawText, convertAggro = false) => {\n        const convertedRaw = emojiConvertor.replace_colons(rawText);\n        if (convertAggro) {\n            return convertedRaw.replace(aggroRegex, (match) => {\n                if (match.length > 0 && (match.charAt(0) !== ':' && match.charAt(match.length - 1) !== ':')) {\n                    // uh oh getting private\n                    const val = emojiConvertor.map.colons[match];\n                    return val ? emojiConvertor.replacement(val, match) : match;\n                }\n                return match;\n            })\n        }\n        return convertedRaw;\n    };\n\n    convertOnInput = (e) => {\n\n        const rawValue = e.target.value;\n\n        const convertedValue = this.convertText(e.target.value, this.state.options.aggressive);\n\n        this.setState({\n            ...this.state,\n            rawValue,\n            convertedValue\n        });\n    };\n\n    handleCheck = (name) => {\n        const newState = {\n            ...this.state,\n            options: {\n                ...this.state.options,\n                [name]: !this.state.options[name]\n            }\n        };\n        if (name === 'aggressive') {\n            newState.convertedValue = this.convertText(this.state.rawValue, !this.state.options.aggressive);\n        }\n        this.setState(newState);\n    };\n\n\n    copyText = () => {\n        this.setState({...this.state, copyClass: 'show'});\n        setTimeout(() => this.setState({...this.state, copyClass: null}), 2000);\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <div className=\"content\">\n                        <h2>Discord Emoji Shortcode Converter</h2>\n                        <p>Paste text from discord with shortcodes to convert them back to regular emojis</p>\n                        <div className=\"optionsContainer\">\n                            <h3 style={{textAlign: 'left'}}>Options</h3>\n                            <Checkbox label={'Aggressive (Match any words)'}\n                                      defaultVal={this.state.options.aggressive}\n                                      handleCheckboxChange={() => this.handleCheck('aggressive')}/>\n                        </div>\n                        <Textarea minRows={3} maxRows={20} className=\"rawText\" onChange={this.convertOnInput}/>\n                        <CopyToClipboard\n                            text={this.state.convertedValue}\n                            onCopy={this.copyText}>\n                            <div className=\"convertedText\">{this.state.convertedValue}</div>\n                        </CopyToClipboard>\n                    </div>\n                    <div className=\"footer\">Made hastily by <a href=\"https://matthewfoxx.com\">Matthew Foxx</a>. Source available at <a href=\"https://github.com/FoxxMD/emojify\">Github</a></div>\n                </header>\n                <div id=\"snackbar\" className={this.state.copyClass}>Copied!</div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","export default {\n    'thumbup': '1f44d',\n    'thumbdown': '1f44e',\n    'timer': '23f2-fe0f',\n    'cowboy': '1f920',\n    'clown': '1f921',\n    'newspaper2': '1f5de-fe0f',\n    'french_bread': '1f956',\n    'nerd': '1f913',\n    'zipper_mouth': '1f910',\n    'salad': '1f957',\n    'rolling_eyes': '1f644',\n    'basketball_player': '26f9-fe0f-200d-2642-fe0f',\n    'thinking': '1f914',\n    'e_mail': '2709-fe0f',\n    'slight_frown': '1f641',\n    'skull_crossbones': '2620-fe0f',\n    'hand_splayed': '1f590-fe0f',\n    'speaking_head': '1f5e3-fe0f',\n    'cross': '271d-fe0f',\n    'crayon': '1f58d-fe0f',\n    'head_bandage': '1f915',\n    'rofl': '1f923',\n    'flag_white': '1f3f3-fe0f',\n    'slight_smile': '1f642',\n    'fork_knife_plate': '1f37d-fe0f',\n    'robot': '1f916',\n    'hugging': '1f917',\n    'biohazard': '2623-fe0f',\n    'notepad_spiral': '1f5d2-fe0f',\n    'lifter': '1f3cb-fe0f-200d-2642-fe0f',\n    'race_car': '1f3ce-fe0f',\n    'left_facing_fist': '1f91b',\n    'right_facing_fist': '1f91c',\n    'tools': '1f6e0-fe0f',\n    'umbrella2': '2602-fe0f',\n    'upside_down': '2b07-fe0f',\n    'first_place': '1f947',\n    'dagger': '1f5e1-fe0f',\n    'fox': '1f98a',\n    'menorah': '1f54e',\n    'desktop': '1f5a5-fe0f',\n    'motorcycle': '1f3cd-fe0f',\n    'levitate': '1f574-fe0f',\n    'cheese': '1f9c0',\n    'fingers_crossed': '1f91e',\n    'frowning2': '1f626',\n    'microphone2': '1f399-fe0f',\n    'flag_black': '1f3f4'\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}